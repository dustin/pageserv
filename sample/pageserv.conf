/*
 * Copyright (c) 1997  Dustin Sallings
 *
 * $Id: pageserv.conf,v 1.31 1998/12/29 09:31:59 dustin Exp $
 */

# This is the default config that comes with pageserv.

etc {
	hostname=localhost;		   # This isn't really used currently

	pidfile=/tmp/pageserv.pid;	# Location of PID file.

	queuedir=/tmp;				# Directory to store queue in (must exist)

	deliveryd=1;				  # 1 to run a delivery daemon
				  # ...not running one means the queue must
				  # be run manually (pageserv -bq)
	deliverysleep=5;			  # How long to sleep between delivery attempts

	working_directory=/tmp;	   # Working directory of the program.

	sendmail="/usr/lib/sendmail -oi -t";			# how to deliver E-mail
	mailfrom="Dustin's Pageserv <dustin@spy.net>";
}

databases {
	// userdbType=nis;		  // Database type, currently NIS, LDAP, or dbm
	// termdbType=dbm;		  // Database type, currently NIS, LDAP, or dbm
	termdbType=ldap;			// Database type, currently NIS, LDAP, or dbm

	userdb=pageserv.users;	  // type specific database information
	termdb=/tmp/termdb;

	// Do a hash of numbers for users, too, so you can page by number.
	userdbrhash=1;

	// Delims for text parses (this includes all characters that act
	// as delimiters, listed here is a space and a tab).
	textdelim=" 	";

	// SQL specific configuration, early experimental code uses this.

	sql {
		host=bleu.west.spy.net;
		// port=xxx;
		// options=xxx;
		// tty=xxx;
		db=misc;

		udb {
			table=userdb;
			name=username;
			id=number;
			terminal=terminal;
		}
	}

	ldap {
		base="dc=spy,dc=net";   // Base for searches
		server=localhost;       // LDAP server to use
		sizelimit=0;;			// Really should always be zero.
		// binddn=;             // DN to bind as
		// bindpw=;             // password for the binddn
	}
}

modules {

	# this is for the original daemon compatibility.  Anything using this
	# should be taken out and shot.

	pageserv {
	run=0;
	port=1029;
		protocols {
			farkle=0;
		}
	}

	# Built-in web server.  Very simple, but can queue pages across it.

	webserver {
		run=1;
		docroot=/tmp/webroot;
		port=1030;
	}

	# The SNPP module, prefered method of queueing pages.
	# Both the included client library, and perl's Net::SNPP work well
	# with this.

	snpp {
		run=1;
		port=1031;

	// How many pagers can receive a given message.
	maxbroadcast=100;
		// Maximum number of allowable transactions (SENDs).
	maxtries=250;

	// Allow users to show their queues
	showq=1;
	// Allow users to dequeue their own pages
	dequeue=1;
	}
}

/* syslog facility */

log {
	facility=local7;   // facility to log in
	hostnames=1;	   // do reverse lookups? (may impact performance)
}

/* Dynamically loading libraries (if applicable) */

libs {
   delivery=delivery/deliver.so;
}

tuning {
	debug=0;

	// This sets the maximum number of seconds a child process can live.
	// In the SNPP module, this is reset via RESEt.
	childLifetime=120;

	// Maximum number of seconds a message can sit in the queue.
	queueLifeTime=60;

	// How many times we'll try to grab a modem before giving up.
	modemGrabAttempts=15;

	// How long to wait between attempts at the modem.
	modemGrabSleep=5;

	// Timeout for dialing.
	modemDialTimeout=30;

	// Messages longer than this are wrapped/truncated.
	maxMessageLength=200;
	// Wordwrap on messages that are too long (else truncate)
	wrapMessages=0;

	// A guess at how many users might be in the database, this is just to
	// give us an idea of how big to initialize user tables, the table will
	// grow as needed, should be a power of 2, too big won't hurt, just
	// use more memory.
	utableguess=32;
}
